// <auto-generated />
using System;
using AcademiaNet.Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AcademiaNet.Backend.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240928214224_addTablesEntitity")]
    partial class addTablesEntitity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AcademiaNet.Shared.Entites.AcademicProgram", b =>
                {
                    b.Property<int>("ProgramID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProgramID"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("InstitutionID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ProgramID");

                    b.HasIndex("InstitutionID");

                    b.ToTable("AcademicPrograms");
                });

            modelBuilder.Entity("AcademiaNet.Shared.Entites.Enrollment", b =>
                {
                    b.Property<int>("EnrollmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EnrollmentID"));

                    b.Property<int>("AcademicProgramProgramID")
                        .HasColumnType("int");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EnrollmentPeriodPeriodID")
                        .HasColumnType("int");

                    b.Property<int>("PeriodID")
                        .HasColumnType("int");

                    b.Property<int>("ProgramID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("EnrollmentID");

                    b.HasIndex("AcademicProgramProgramID");

                    b.HasIndex("EnrollmentPeriodPeriodID");

                    b.HasIndex("UserID");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("AcademiaNet.Shared.Entites.EnrollmentPeriod", b =>
                {
                    b.Property<int>("PeriodID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PeriodID"));

                    b.Property<DateTime>("EndDateEnrollment")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDateExam")
                        .HasColumnType("datetime2");

                    b.Property<int>("InstitutionID")
                        .HasColumnType("int");

                    b.Property<string>("PeriodName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("StartDateEnrollment")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDateExam")
                        .HasColumnType("datetime2");

                    b.HasKey("PeriodID");

                    b.HasIndex("InstitutionID");

                    b.ToTable("EnrollmentPeriods");
                });

            modelBuilder.Entity("AcademiaNet.Shared.Entites.Exam", b =>
                {
                    b.Property<int>("ExamID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamID"));

                    b.Property<int>("EnrollmentPeriodPeriodID")
                        .HasColumnType("int");

                    b.Property<int>("MaxValue")
                        .HasColumnType("int");

                    b.Property<int>("MinValue")
                        .HasColumnType("int");

                    b.Property<int>("PeriodID")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ExamID");

                    b.HasIndex("EnrollmentPeriodPeriodID");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("AcademiaNet.Shared.Entites.ExamResult", b =>
                {
                    b.Property<int>("ResultID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResultID"));

                    b.Property<DateTime>("ExamDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExamID")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ResultID");

                    b.HasIndex("ExamID");

                    b.HasIndex("UserID");

                    b.ToTable("ExamResults");
                });

            modelBuilder.Entity("AcademiaNet.Shared.Entites.Institution", b =>
                {
                    b.Property<int>("InstitutionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstitutionID"));

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("InstitutionID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Institutions");
                });

            modelBuilder.Entity("AcademiaNet.Shared.Entites.Notification", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationID"));

                    b.Property<int>("EnrollmentPeriodPeriodID")
                        .HasColumnType("int");

                    b.Property<int>("PeriodID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("NotificationID");

                    b.HasIndex("EnrollmentPeriodPeriodID");

                    b.HasIndex("UserID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("AcademiaNet.Shared.Entites.PeriodAcademicPrograms", b =>
                {
                    b.Property<int>("PeriodAcademicProgramID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PeriodAcademicProgramID"));

                    b.Property<int>("AcademicProgramProgramID")
                        .HasColumnType("int");

                    b.Property<int>("EnrollmentPeriodPeriodID")
                        .HasColumnType("int");

                    b.Property<int>("PeriodID")
                        .HasColumnType("int");

                    b.Property<int>("ProgramID")
                        .HasColumnType("int");

                    b.HasKey("PeriodAcademicProgramID");

                    b.HasIndex("AcademicProgramProgramID");

                    b.HasIndex("EnrollmentPeriodPeriodID");

                    b.ToTable("PeriodAcademicPrograms");
                });

            modelBuilder.Entity("AcademiaNet.Shared.Entites.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleID"));

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RoleID");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("AcademiaNet.Shared.Entites.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("InstitutionID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.HasKey("UserID");

                    b.HasIndex("InstitutionID");

                    b.HasIndex("RoleID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AcademiaNet.Shared.Entites.AcademicProgram", b =>
                {
                    b.HasOne("AcademiaNet.Shared.Entites.Institution", "Institution")
                        .WithMany("AcademicPrograms")
                        .HasForeignKey("InstitutionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("AcademiaNet.Shared.Entites.Enrollment", b =>
                {
                    b.HasOne("AcademiaNet.Shared.Entites.AcademicProgram", "AcademicProgram")
                        .WithMany("Enrollments")
                        .HasForeignKey("AcademicProgramProgramID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AcademiaNet.Shared.Entites.EnrollmentPeriod", "EnrollmentPeriod")
                        .WithMany("Enrollments")
                        .HasForeignKey("EnrollmentPeriodPeriodID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AcademiaNet.Shared.Entites.User", "User")
                        .WithMany("Enrollments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AcademicProgram");

                    b.Navigation("EnrollmentPeriod");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademiaNet.Shared.Entites.EnrollmentPeriod", b =>
                {
                    b.HasOne("AcademiaNet.Shared.Entites.Institution", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("AcademiaNet.Shared.Entites.Exam", b =>
                {
                    b.HasOne("AcademiaNet.Shared.Entites.EnrollmentPeriod", "EnrollmentPeriod")
                        .WithMany("Exams")
                        .HasForeignKey("EnrollmentPeriodPeriodID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EnrollmentPeriod");
                });

            modelBuilder.Entity("AcademiaNet.Shared.Entites.ExamResult", b =>
                {
                    b.HasOne("AcademiaNet.Shared.Entites.Exam", "Exam")
                        .WithMany("ExamResults")
                        .HasForeignKey("ExamID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AcademiaNet.Shared.Entites.User", "User")
                        .WithMany("ExamResults")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademiaNet.Shared.Entites.Notification", b =>
                {
                    b.HasOne("AcademiaNet.Shared.Entites.EnrollmentPeriod", "EnrollmentPeriod")
                        .WithMany("Notifications")
                        .HasForeignKey("EnrollmentPeriodPeriodID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AcademiaNet.Shared.Entites.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EnrollmentPeriod");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademiaNet.Shared.Entites.PeriodAcademicPrograms", b =>
                {
                    b.HasOne("AcademiaNet.Shared.Entites.AcademicProgram", "AcademicProgram")
                        .WithMany("PeriodAcademicProgramss")
                        .HasForeignKey("AcademicProgramProgramID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AcademiaNet.Shared.Entites.EnrollmentPeriod", "EnrollmentPeriod")
                        .WithMany()
                        .HasForeignKey("EnrollmentPeriodPeriodID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AcademicProgram");

                    b.Navigation("EnrollmentPeriod");
                });

            modelBuilder.Entity("AcademiaNet.Shared.Entites.User", b =>
                {
                    b.HasOne("AcademiaNet.Shared.Entites.Institution", "Institution")
                        .WithMany("Users")
                        .HasForeignKey("InstitutionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AcademiaNet.Shared.Entites.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Institution");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AcademiaNet.Shared.Entites.AcademicProgram", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("PeriodAcademicProgramss");
                });

            modelBuilder.Entity("AcademiaNet.Shared.Entites.EnrollmentPeriod", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("Exams");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("AcademiaNet.Shared.Entites.Exam", b =>
                {
                    b.Navigation("ExamResults");
                });

            modelBuilder.Entity("AcademiaNet.Shared.Entites.Institution", b =>
                {
                    b.Navigation("AcademicPrograms");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("AcademiaNet.Shared.Entites.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("AcademiaNet.Shared.Entites.User", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("ExamResults");

                    b.Navigation("Notifications");
                });
#pragma warning restore 612, 618
        }
    }
}
